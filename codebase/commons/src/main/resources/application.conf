cassandra.contactPoint = ${?CASSANDRA_CONTACT_POINT}

identityService.contactPoint = "IDENTITY_SERVICE_CONTACT_POINT_NOT_CONFIGURED"
identityService.contactPoint = ${?IDENTITY_SERVICE_CONTACT_POINT}

billingService.contactPoint = "BILLING_SERVICE_CONTACT_POINT_NOT_CONFIGURED"
billingService.contactPoint = ${?BILLING_SERVICE_CONTACT_POINT}

paymentSystem.contactPoint = "PAYMENT_SYSTEM_CONTACT_POINT_NOT_CONFIGURED"
paymentSystem.contactPoint = ${?PAYMENT_SYSTEM_CONTACT_POINT}

http.responseTimeout = 600
http.responseTimeout = ${?HTTP_RESPONSE_TIMEOUT}

http.connectionTimeout = 600
http.connectionTimeout = ${?HTTP_RESPONSE_TIMEOUT}
akka.http.server.request-timeout="infinite"
akka.http.client.connecting-timeout = 15min
akka.http.host-connection-pool.max-open-requests=256
akka.http.host-connection-pool.max-connections=20
akka.stream.alpakka.s3 {
  # whether the buffer request chunks (up to 5MB each) to "memory" or "disk"
  buffer = "memory"

  # location for temporary files, if buffer is set to "disk". If empty, uses the standard java temp path.
  disk-buffer-path = ""

  proxy {
    # hostname of the proxy. If undefined ("") proxy is not enabled.
    host = ""
    port = 8000

    # if "secure" is set to "true" then HTTPS will be used for all requests to S3, otherwise HTTP will be used
    secure = true
  }

  # default values for AWS configuration. If credentials and/or region are not specified when creating S3Client,
  # these values will be used.
  aws {
    # DEPRECATION WARNING
    # Support for settins directly on this level is left for compatibility.
    # It may be removed in future releases.
    # An attempt will be made to read these if no `aws.credentials.*` params
    # will be provided. If you used these parameters, switch to the new format.
    # access-key-id
    # secret-access-key
    # Equivalent config would be:
    # akka.stream.alpakka.s3.aws.credentials {
    #   provider = static
    #   access-key-id = ${old-access-key-id}
    #   secret-access-key = ${old-secret-access-key}
    # }
    # If this section is absent, the fallback behavior is to use the
    # com.amazonaws.auth.DefaultAWSCredentialsProviderChain instance to resolve credentials
    credentials {
      # supported providers:
      # anon - anonymous requests ("no auth")
      # static - static credentials,
      #   required params:
      #     access-key-id
      #     secret-access-key
      #   optional:
      #     token
      # default: as described in com.amazonaws.auth.DefaultAWSCredentialsProviderChain docs,
      # attempts to get the credentials from either:
      #   - environment variables
      #   - system properties
      #   - credentials file
      #   - EC2 credentials service
      #   - IAM / metadata
      provider = default
    }

    # If this section is absent, the fallback behavior is to use the
    # com.amazonaws.regions.AwsRegionProvider.DefaultAwsRegionProviderChain instance to resolve region
    region {
      # supported providers:
      # static - static credentials,
      #   required params:
      #     default-region
      # default: as described in com.amazonaws.regions.AwsRegionProvider.DefaultAwsRegionProviderChain docs,
      # attempts to get the region from either:
      #   - environment variables
      #   - system properties
      #   - progile file
      #   - EC2 metadata
      provider = static
      default-region = "eu-west-1"
    }
  }

  # Enable path style access to s3, i.e. "https://s3-eu-west-1.amazonaws.com/my.bucket/myobject"
  # Default is virtual-hosted style.
  # When using virtual hostedâ€“style buckets with SSL, the S3 wild card certificate only matches buckets that do not contain periods.
  # Buckets containing periods will lead to certificate errors. In those cases it's useful to enable path-style access.
  path-style-access = false

  # Custom endpoint url, used for alternate s3 implementations
  # endpoint-url = null

  # Which version of the list bucket api to use. Set to 1 to use the old style version 1 API.
  # By default the newer version 2 api is used.
  list-bucket-api-version = 2
}